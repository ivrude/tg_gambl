from aiogram import Router, F
from aiogram.types import Message
from bot.models import User
from bot.database import SessionLocal
from bot.config import ADMIN_IDS
import re
from sqlalchemy import select
import random

router = Router()

def setup_handlers(dp):
    dp.include_router(router)

@router.message(F.text == "/start")
async def start_handler(msg: Message):
    async with SessionLocal() as session:
        result = await session.execute(
            User.__table__.select().where(User.telegram_id == msg.from_user.id)
        )
        user = result.scalar_one_or_none()
        if not user:
            user = User(telegram_id=msg.from_user.id, balance=100)
            session.add(user)
            await session.commit()
        await msg.answer("–í—ñ—Ç–∞—é –≤ –≥—Ä—ñ! –í–∞—à –±–∞–ª–∞–Ω—Å: 100 –≥—Ä–Ω\n–ù–∞–ø–∏—à—ñ—Ç—å /play —â–æ–± –∑—ñ–≥—Ä–∞—Ç–∏.")

@router.message(F.text == "/balance")
async def balance_handler(msg: Message):
    telegram_id = msg.from_user.id

    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if user:
            await msg.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} –≥—Ä–Ω")
        else:
            await msg.answer("‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —Å–ø–æ—á–∞—Ç–∫—É.")

@router.message(F.text == "/deposit")
async def deposit_handler(msg: Message):
    await msg.answer(
        "üí≥ –î–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:\n"
        "1. –ó–¥—ñ–π—Å–Ω—ñ—Ç—å –ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç—É: <b>5375 xxxx xxxx xxxx</b>\n"
        "2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó —É —á–∞—Ç."
    )

# --- –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó ---
@router.message(F.photo)
async def handle_receipt_photo(msg: Message):
    photo = msg.photo[-1].file_id
    caption = f"üßæ –ù–æ–≤–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—è!\nTelegram ID: <code>{msg.from_user.id}</code>"

    for admin_id in ADMIN_IDS:
        await msg.bot.send_photo(chat_id=admin_id, photo=photo, caption=caption)

    await msg.answer("‚úÖ –ö–≤–∏—Ç–∞–Ω—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")

# --- –ê–¥–º—ñ–Ω –ø–æ–ø–æ–≤–Ω—é—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –Ω–∞ —Ñ–æ—Ç–æ ---
@router.message(F.text.startswith("/approve"), F.from_user.id.in_(ADMIN_IDS))
async def approve_deposit(msg: Message):
    if not msg.reply_to_message or not msg.reply_to_message.caption:
        await msg.answer("‚ö†Ô∏è –í–∏ –º–∞—î—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—î—é.")
        return

    caption = msg.reply_to_message.caption

    # –®—É–∫–∞—î–º–æ ID –∑ –∞–±–æ –±–µ–∑ <code> —Ç–µ–≥—ñ–≤
    match = re.search(r'Telegram ID: ?(?:<code>)?(\d+)(?:</code>)?', caption)
    if not match:
        await msg.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ Telegram ID —É –ø—ñ–¥–ø–∏—Å—ñ.\n–û—Ç—Ä–∏–º–∞–Ω–∏–π caption:\n\n{caption}")
        return

    telegram_id = int(match.group(1))

    try:
        parts = msg.text.split()
        amount = float(parts[1])
    except:
        await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: /approve <—Å—É–º–∞>")
        return

    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        if user:
            user.balance += amount
            await session.commit()
            await msg.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ {amount} –≥—Ä–Ω.")
        else:
            await msg.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")