from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from bot.models import User, BankCard
from bot.database import SessionLocal
from bot.config import ADMIN_IDS
import re
from sqlalchemy import select

from bot.services import game

router = Router()
class GameState(StatesGroup):
    waiting_for_guess = State()
    waiting_for_bet = State()

def setup_handlers(dp):
    dp.include_router(router)

@router.message(F.text.in_(['/start', 'üìã –ú–µ–Ω—é']))
async def start_handler(msg: Message):
    async with SessionLocal() as session:
        result = await session.execute(
            User.__table__.select().where(User.telegram_id == msg.from_user.id)
        )
        user = result.scalar_one_or_none()
        if not user:
            user = User(telegram_id=msg.from_user.id, balance=100)
            session.add(user)
            await session.commit()
    buttons = [
        [KeyboardButton(text="üéÆ –Ü–≥—Ä–∏")],
        [KeyboardButton(text="üí≥ –î–µ–ø–æ–∑–∏—Ç")]
    ]
    if msg.from_user.id in ADMIN_IDS:
        buttons.append([KeyboardButton(text="üõ† –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")])

    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await msg.answer("–í—ñ—Ç–∞—é –≤ –≥—Ä—ñ! –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=keyboard)

@router.message(F.text.in_(["üé≤ –ë—ñ–ª—å—à–µ / –ú–µ–Ω—à–µ", "üé≤ –ó—ñ–≥—Ä–∞—Ç–∏ —â–µ"]))
async def start_game(msg: Message, state: FSMContext):
    first_number = game.generate_number()  # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–µ—Ä—à–µ —á–∏—Å–ª–æ –∑ game.py
    await state.update_data(first_number=first_number)
    await msg.answer(
        f"üé≤ –ü–µ—Ä—à–µ —á–∏—Å–ª–æ: <b>{first_number}</b>\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç: –º–µ–Ω—à–µ, –±—ñ–ª—å—à–µ –∞–±–æ —Ä—ñ–≤–Ω–æ (–≤—ñ–¥–Ω–æ—Å–Ω–æ <b>–¥—Ä—É–≥–æ–≥–æ —á–∏—Å–ª–∞</b>)"
    )
    await state.set_state(GameState.waiting_for_guess)


@router.message(GameState.waiting_for_guess)
async def choose_guess(msg: Message, state: FSMContext):
    guess = msg.text.lower()
    if guess not in ["–º–µ–Ω—à–µ", "–±—ñ–ª—å—à–µ", "—Ä—ñ–≤–Ω–æ"]:
        await msg.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ: –º–µ–Ω—à–µ, –±—ñ–ª—å—à–µ –∞–±–æ —Ä—ñ–≤–Ω–æ")
        return
    await state.update_data(guess=guess)
    await msg.answer("üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Å—Ç–∞–≤–∫–∏:")
    await state.set_state(GameState.waiting_for_bet)


@router.message(GameState.waiting_for_bet)
async def enter_bet(msg: Message, state: FSMContext):
    try:
        bet = float(msg.text)
        if bet <= 0:
            raise ValueError
    except:
        await msg.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É.")
        return

    data = await state.get_data()
    first_number = data["first_number"]
    guess = data["guess"]
    second_number = game.generate_number()  # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥—Ä—É–≥–µ —á–∏—Å–ª–æ

    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == msg.from_user.id)
        )
        user = result.scalar_one_or_none()
        if not user:
            await msg.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return
        if user.balance < bet:
            await state.clear()  # –í–∏–π—Ç–∏ –∑ FSM, —â–æ–± –Ω–µ —á–µ–∫–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
            await msg.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ, –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è /deposit.")
            return

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é evaluate_guess –∑ game.py
        win, reward, f1, f2 = game.evaluate_guess(guess, bet, first_number, second_number)
        if win:
            user.balance += reward
            result_msg = f"üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏ {reward:.2f} –≥—Ä–Ω!"
        else:
            user.balance -= bet
            result_msg = f"üò¢ –í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏ {bet:.2f} –≥—Ä–Ω."

        await session.commit()
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé≤ –ó—ñ–≥—Ä–∞—Ç–∏ —â–µ")],
            [KeyboardButton(text="üìã –ú–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

    await msg.answer(
        f"üé≤ –ü–µ—Ä—à–µ —á–∏—Å–ª–æ: <b>{f1}</b>\n"
        f"üéØ –î—Ä—É–≥–µ —á–∏—Å–ª–æ: <b>{f2}</b>\n"
        f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>{guess}</b>\n\n"
        f"{result_msg}",
        reply_markup = keyboard,
    )
    await state.clear()

@router.message(F.text == "/balance")
async def balance_handler(msg: Message):
    telegram_id = msg.from_user.id

    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if user:
            await msg.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} –≥—Ä–Ω")
        else:
            await msg.answer("‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —Å–ø–æ—á–∞—Ç–∫—É.")

@router.message(F.text.in_(["üí≥ –î–µ–ø–æ–∑–∏—Ç", "/deposit"]))
async def deposit_handler(msg: Message):
    async with SessionLocal() as session:
        result = await session.execute(select(BankCard).limit(1))
        card = result.scalar_one_or_none()
        card_number = card.card_number if card else "‚ùå –ö–∞—Ä—Ç–∫—É –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

    await msg.answer(
        f"üí≥ –î–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:\n"
        f"1. –ó–¥—ñ–π—Å–Ω—ñ—Ç—å –ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç—É: <b>{card_number}</b>\n"
        f"2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó —É —á–∞—Ç."
    )


# --- –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó ---
@router.message(F.photo)
async def handle_receipt_photo(msg: Message):
    photo = msg.photo[-1].file_id
    caption = f"üßæ –ù–æ–≤–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—è!\nTelegram ID: <code>{msg.from_user.id}</code>"

    for admin_id in ADMIN_IDS:
        await msg.bot.send_photo(chat_id=admin_id, photo=photo, caption=caption)

    await msg.answer("‚úÖ –ö–≤–∏—Ç–∞–Ω—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")

# --- –ê–¥–º—ñ–Ω –ø–æ–ø–æ–≤–Ω—é—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –Ω–∞ —Ñ–æ—Ç–æ ---
@router.message(F.text.startswith("/approve"), F.from_user.id.in_(ADMIN_IDS))
async def approve_deposit(msg: Message):
    if not msg.reply_to_message or not msg.reply_to_message.caption:
        await msg.answer("‚ö†Ô∏è –í–∏ –º–∞—î—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—î—é.")
        return

    caption = msg.reply_to_message.caption

    # –®—É–∫–∞—î–º–æ ID –∑ –∞–±–æ –±–µ–∑ <code> —Ç–µ–≥—ñ–≤
    match = re.search(r'Telegram ID: ?(?:<code>)?(\d+)(?:</code>)?', caption)
    if not match:
        await msg.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ Telegram ID —É –ø—ñ–¥–ø–∏—Å—ñ.\n–û—Ç—Ä–∏–º–∞–Ω–∏–π caption:\n\n{caption}")
        return

    telegram_id = int(match.group(1))

    try:
        parts = msg.text.split()
        amount = float(parts[1])
    except:
        await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: /approve <—Å—É–º–∞>")
        return

    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        if user:
            user.balance += amount
            await session.commit()
            await msg.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ {amount} –≥—Ä–Ω.")
        else:
            await msg.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


@router.message(F.text.startswith("/set_card"))
async def set_bank_card(msg: Message):
    if msg.from_user.id not in ADMIN_IDS:
        return await msg.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ —Ü—é –¥—ñ—é.")

    try:
        _, card_number = msg.text.split(maxsplit=1)
    except ValueError:
        return await msg.answer("‚ùó –§–æ—Ä–º–∞—Ç: /set_card 4444 1111 2222 3333")

    async with SessionLocal() as session:
        result = await session.execute(select(BankCard).limit(1))
        card = result.scalar_one_or_none()

        if card:
            card.card_number = card_number
        else:
            card = BankCard(card_number=card_number)
            session.add(card)

        await session.commit()

    await msg.answer(f"‚úÖ –ë–∞–Ω–∫—ñ–≤—Å—å–∫—É –∫–∞—Ä—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ:\n<code>{card_number}</code>")

@router.message(F.text.startswith("/find_user"))
async def find_user_handler(msg: Message):
    if msg.from_user.id not in ADMIN_IDS:
        return await msg.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ —Ü—é –¥—ñ—é.")

    try:
        _, telegram_id_str = msg.text.split(maxsplit=1)
        telegram_id = int(telegram_id_str)
    except (ValueError, IndexError):
        return await msg.answer("‚ùó –§–æ—Ä–º–∞—Ç: /find_user 2233445566")

    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if user:
            await msg.answer(
                f"üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
                f"<b>Telegram ID:</b> <code>{user.telegram_id}</code>\n"
                f"<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{user.balance} –≥—Ä–Ω</code>",
                parse_mode="HTML"
            )
        else:
            await msg.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@router.message(F.text.startswith("/change_user"))
async def change_user_balance(msg: Message):
    if msg.from_user.id not in ADMIN_IDS:
        return await msg.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ —Ü—é –¥—ñ—é.")

    try:
        _, user_id_str, change_str = msg.text.split(maxsplit=2)
        telegram_id = int(user_id_str)

        if not (change_str.startswith('+') or change_str.startswith('-')):
            raise ValueError("–ù–µ–º–∞—î + –∞–±–æ - –ø–µ—Ä–µ–¥ —Å—É–º–æ—é")

        amount = float(change_str)
    except Exception:
        return await msg.answer("‚ùó –§–æ—Ä–º–∞—Ç: /change_user telegram_id +/-—Å—É–º–∞\n"
                                "–ü—Ä–∏–∫–ª–∞–¥: /change_user 123456789 +100")

    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            return await msg.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        user.balance += amount
        await session.commit()

        action = "–¥–æ–¥–∞–Ω–æ" if amount > 0 else "–≤—ñ–¥–Ω—è—Ç–æ"
        await msg.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user.telegram_id}</code> –æ–Ω–æ–≤–ª–µ–Ω–æ.\n"
            f"–ë—É–ª–æ {action} <b>{abs(amount)} –≥—Ä–Ω</b>\n"
            f"üìü –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: <code>{user.balance:.2f} –≥—Ä–Ω</code>",
            parse_mode="HTML"
        )

@router.message(F.text.in_(["üéÆ –Ü–≥—Ä–∏","/games"]))
async def games_menu(msg: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé≤ –ë—ñ–ª—å—à–µ / –ú–µ–Ω—à–µ")],
            [KeyboardButton(text="ü™ô –ú–æ–Ω–µ—Ç–∫–∞")],
            [KeyboardButton(text="üé∞ –ö–∞–∑–∏–Ω–æ")],
            [KeyboardButton(text="üìã –ú–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await msg.answer("üéÆ –û–±–µ—Ä–∏ –≥—Ä—É:", reply_markup=keyboard)

@router.message(F.text == "ü™ô –ú–æ–Ω–µ—Ç–∫–∞")
async def coin_handler(msg: Message):
    await msg.answer("–ì—Ä–∞ –≤ –º–æ–Ω–µ—Ç–∫—É –Ω–∞ –µ—Ç–∞–ø—ñ —Ä–æ–∑—Ä–æ–±–∫–∏.")

@router.message(F.text == "üé∞ –ö–∞–∑–∏–Ω–æ")
async def casino_handler(msg: Message):
    await msg.answer("–ì—Ä–∞ –≤ –∫–∞–∑–∏–Ω–æ –ø–æ–∫–∏ —â–æ –Ω–∞ –µ—Ç–∞–ø—ñ —Ä–æ–∑—Ä–æ–±–∫–∏.")

@router.message(F.text.in_(["üõ† –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", "/admin"]))
async def admin_panel_handler(msg: Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ.")
        return

    buttons = [
        [KeyboardButton(text="üîç –ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")],
        [KeyboardButton(text="üí∞ –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")],
        [KeyboardButton(text="üí≥ –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É")],
        [KeyboardButton(text="üìã –ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await msg.answer("üõ† –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)

@router.message(F.text == "üîç –ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def casino_handler(msg: Message):
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å: /find_user 2233445566")

@router.message(F.text == "üí∞ –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def casino_handler(msg: Message):
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å: /change_user 123456789 +100")

@router.message(F.text == "üí≥ –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É")
async def casino_handler(msg: Message):
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å: /set_card 4444 1111 2222 3333")